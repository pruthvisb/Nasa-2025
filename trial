import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score,
    roc_auc_score, confusion_matrix
)

import torch
import torch.nn as nn
import torch.optim as optim

# ---------------------
# CONFIG
# ---------------------
DATA_PATH = "exoplanets.csv"    # change if needed
SUBMISSION_PATH = "submission.csv"
BATCH_SIZE = 64
EPOCHS = 50
LR = 1e-3
DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print("Using device:", DEVICE)

# ---------------------
# 1. Load and clean data
# ---------------------
df = pd.read_csv(DATA_PATH)

# Drop ID / text columns if present
drop_cols = [
    "rowid","kepid","kepoi_name","kepler_name",
    "koi_pdisposition","koi_score","koi_tce_delivname"
]
for c in drop_cols:
    if c in df.columns:
        df.drop(columns=c, inplace=True)

# Keep only CONFIRMED / CANDIDATE
df = df[df["koi_disposition"].isin(["CONFIRMED","CANDIDATE"])]

# Target: Candidate=1, Confirmed=0
df["target"] = (df["koi_disposition"] == "CANDIDATE").astype(int)
df.drop(columns=["koi_disposition"], inplace=True)

# Keep only numeric columns
num_cols = df.select_dtypes(include=[np.number]).columns.tolist()
num_cols.remove("target")  # separate target

# Drop columns that are all NaN
for c in num_cols:
    if df[c].isna().all():
        print("Dropping empty column:", c)
        df.drop(columns=c, inplace=True)
num_cols = [c for c in num_cols if c in df.columns]

# Fill remaining NaNs with column median
df[num_cols] = df[num_cols].fillna(df[num_cols].median())

# Final check
assert not df[num_cols].isna().any().any(), "Still have NaNs after cleaning!"

X = df[num_cols].values
y = df["target"].values

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train/test split
X_train, X_val, y_train, y_val = train_test_split(
    X_scaled, y, test_size=0.3, stratify=y, random_state=42
)

print("Train shape:", X_train.shape, "Val shape:", X_val.shape)

# ---------------------
# 2. Dataset & Loader
# ---------------------
class ExoplanetDataset(torch.utils.data.Dataset):
    def __init__(self, X, y):
        self.X = torch.tensor(X, dtype=torch.float32)
        self.y = torch.tensor(y, dtype=torch.float32).unsqueeze(1)
    def __len__(self): return len(self.X)
    def __getitem__(self, idx): return self.X[idx], self.y[idx]

train_loader = torch.utils.data.DataLoader(
    ExoplanetDataset(X_train, y_train), batch_size=BATCH_SIZE, shuffle=True)
val_loader = torch.utils.data.DataLoader(
    ExoplanetDataset(X_val, y_val), batch_size=BATCH_SIZE)

# ---------------------
# 3. Model
# ---------------------
class ExoplanetNN(nn.Module):
    def __init__(self, input_dim):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(input_dim, 64),
            nn.ReLU(),
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 1)
        )
    def forward(self, x): return self.net(x)

model = ExoplanetNN(X_train.shape[1]).to(DEVICE)
criterion = nn.BCEWithLogitsLoss()
optimizer = optim.Adam(model.parameters(), lr=LR)

# ---------------------
# 4. Training
# ---------------------
for epoch in range(1, EPOCHS + 1):
    model.train()
    running_loss = 0.0
    for xb, yb in train_loader:
        xb, yb = xb.to(DEVICE), yb.to(DEVICE)
        optimizer.zero_grad()
        logits = model(xb)
        loss = criterion(logits, yb)
        loss.backward()
        optimizer.step()
        running_loss += loss.item() * xb.size(0)
    train_loss = running_loss / len(train_loader.dataset)

    # Validation
    model.eval()
    all_probs, all_targets = [], []
    with torch.no_grad():
        for xb, yb in val_loader:
            xb = xb.to(DEVICE)
            logits = model(xb)
            probs = torch.sigmoid(logits).cpu().numpy()
            all_probs.append(probs)
            all_targets.append(yb.numpy())
    all_probs = np.vstack(all_probs)
    all_targets = np.vstack(all_targets)

    # Final NaN check
    if np.isnan(all_probs).any() or np.isnan(all_targets).any():
        raise ValueError("NaNs detected in validation data!")

    preds = (all_probs >= 0.5).astype(int)
    acc = accuracy_score(all_targets, preds)
    auc = roc_auc_score(all_targets, all_probs)

    print(f"Epoch {epoch:02d} | Loss {train_loss:.4f} | Val Acc {acc:.4f} | Val AUC {auc:.4f}")

# ---------------------
# 5. Final Evaluation
# ---------------------
val_probs = all_probs.ravel()
val_preds = preds.ravel()
acc  = accuracy_score(y_val, val_preds)
prec = precision_score(y_val, val_preds)
rec  = recall_score(y_val, val_preds)
f1   = f1_score(y_val, val_preds)
auc  = roc_auc_score(y_val, val_probs)
print("\nFinal metrics:")
print(f"Accuracy {acc:.3f}  Precision {prec:.3f}  Recall {rec:.3f}  F1 {f1:.3f}  AUC {auc:.3f}")

# ---------------------
# 6. Save submission
# ---------------------
submission = pd.DataFrame({
    "index": np.arange(len(y_val)),
    "probability_candidate": val_probs,
    "prediction": val_preds
})
submission.to_csv(SUBMISSION_PATH, index=False)
print("Submission saved to", SUBMISSION_PATH)

